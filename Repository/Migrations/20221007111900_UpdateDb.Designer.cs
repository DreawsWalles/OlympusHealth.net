// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository.Data;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221007111900_UpdateDb")]
    partial class UpdateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.1.22426.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Business.Enties.Address.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Business.Enties.Address.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Business.Enties.Address.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Business.Enties.Address.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumberOfHouse")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("Business.Enties.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Business.Enties.HistoryNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<Guid?>("MedicId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SysAdminId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SysAdminId");

                    b.ToTable("HistoryNodes");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.Files", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MedicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Corpus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("StreetId");

                    b.ToTable("Corpuses");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Corpus_Medic", b =>
                {
                    b.Property<Guid>("CorpusId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<Guid>("MedicId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(2);

                    b.HasKey("CorpusId", "MedicId");

                    b.HasIndex("MedicId");

                    b.ToTable("Corpuses_Medics");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChiefsOfDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorpusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChiefsOfDepartmentId");

                    b.HasIndex("CorpusId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorpusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CorpusId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.Medic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateBirthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDismissal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateEmployment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DoctorsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MedicRegistratorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Surnane")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DoctorsId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MedicRegistratorId");

                    b.HasIndex("Login", "Email", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("Medics");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.AdvancedTrainingCourses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StreetId");

                    b.ToTable("AdvancedTrainingCourses");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.HightSchool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StreetId");

                    b.ToTable("HightSchools");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.Intership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StreetId");

                    b.ToTable("Interships");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.PlaceOfStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdvancedTrainingCoursesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndEducation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HightSchoolsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IntershipsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecialitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartEducation")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedTrainingCoursesId");

                    b.HasIndex("HightSchoolsId");

                    b.HasIndex("IntershipsId");

                    b.HasIndex("MedicId");

                    b.HasIndex("SpecialitiesId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("PlaceOfStudies");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StreetId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.Description", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<Guid>("HeadOfDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NeedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProcessDynamicsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResearchAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResultIllnessId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDescriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HeadOfDepartmentId");

                    b.HasIndex("MethodId");

                    b.HasIndex("ProcessDynamicsId");

                    b.HasIndex("ResearchAreaId");

                    b.HasIndex("ResultIllnessId");

                    b.HasIndex("SubDescriptionId");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.DescriptionOfSigns", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DescriptionsOfSigns");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.Description_StatusOfTheAttribute", b =>
                {
                    b.Property<Guid>("DescriptionId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<Guid>("StatusOfTheAttributeId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(2);

                    b.HasKey("DescriptionId", "StatusOfTheAttributeId");

                    b.HasIndex("StatusOfTheAttributeId");

                    b.ToTable("Description_StatusOfTheAttribute");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.Method_DescriptionOfSigns", b =>
                {
                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<Guid>("DescriptionOfSighsId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(2);

                    b.HasKey("MethodId", "DescriptionOfSighsId");

                    b.HasIndex("DescriptionOfSighsId");

                    b.ToTable("Method_DescriptionsOfSigns");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.StatusOfTheAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescriptionOfSignsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionOfSignsId");

                    b.ToTable("StatusesOfTheAttribute");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.Illness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Illnesses");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.Illness_Method", b =>
                {
                    b.Property<Guid>("IllnessId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(2);

                    b.HasKey("IllnessId", "MethodId");

                    b.HasIndex("MethodId");

                    b.ToTable("Illness_Methods");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.ResultIllness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SignsOfResearchId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SignsOfResearchId");

                    b.ToTable("ResultIllnesses");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.SignsOfResearch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IllnessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.ToTable("SignsOfResearches");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AddEnter")
                        .HasColumnType("boolean");

                    b.Property<string>("NameFieldMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ResearchAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResearchCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResearchAreaId");

                    b.HasIndex("ResearchCategoryId");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.ProcessDynamics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProcessDynamicses");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.RadiationDose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Dose")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("RadiationDoses");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.ResearchArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("ResearchAreas");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.ResearchCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ResearchCategories");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.OutpatientCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateLastAdmission")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateNextAdmission")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResearchAreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ResearchAreaId");

                    b.ToTable("OutpatientCards");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("Login", "Email", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Business.Enties.SysAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("SysAdmins");
                });

            modelBuilder.Entity("DescriptionOfSignsMethod", b =>
                {
                    b.Property<Guid>("DescriptionOfSignsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodsId")
                        .HasColumnType("uuid");

                    b.HasKey("DescriptionOfSignsId", "MethodsId");

                    b.HasIndex("MethodsId");

                    b.ToTable("DescriptionOfSignsMethod");
                });

            modelBuilder.Entity("DescriptionStatusOfTheAttribute", b =>
                {
                    b.Property<Guid>("DescriptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusOfTheAttributesId")
                        .HasColumnType("uuid");

                    b.HasKey("DescriptionsId", "StatusOfTheAttributesId");

                    b.HasIndex("StatusOfTheAttributesId");

                    b.ToTable("DescriptionStatusOfTheAttribute");
                });

            modelBuilder.Entity("IllnessMethod", b =>
                {
                    b.Property<Guid>("IllnessesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodsId")
                        .HasColumnType("uuid");

                    b.HasKey("IllnessesId", "MethodsId");

                    b.HasIndex("MethodsId");

                    b.ToTable("IllnessMethod");
                });

            modelBuilder.Entity("Business.Enties.Address.City", b =>
                {
                    b.HasOne("Business.Enties.Address.Region", "Region")
                        .WithMany("Citys")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Business.Enties.Address.Region", b =>
                {
                    b.HasOne("Business.Enties.Address.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Business.Enties.Address.Street", b =>
                {
                    b.HasOne("Business.Enties.Address.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Business.Enties.HistoryNode", b =>
                {
                    b.HasOne("Business.Enties.MedicModel.Medic", "Medic")
                        .WithMany("HistoryNodes")
                        .HasForeignKey("MedicId");

                    b.HasOne("Business.Enties.PatientModel.Patient", "Patient")
                        .WithMany("HistoryNodes")
                        .HasForeignKey("PatientId");

                    b.HasOne("Business.Enties.SysAdmin", "SysAdmin")
                        .WithMany("HistoryNodes")
                        .HasForeignKey("SysAdminId");

                    b.Navigation("Medic");

                    b.Navigation("Patient");

                    b.Navigation("SysAdmin");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.Files", b =>
                {
                    b.HasOne("Business.Enties.MedicModel.Medic", "Medic")
                        .WithMany("Files")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medic");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Corpus", b =>
                {
                    b.HasOne("Business.Enties.MedicModel.InstitutionModel.Institution", "Institution")
                        .WithMany("Corpuses")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.Address.Street", "Street")
                        .WithMany("Corpuses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Corpus_Medic", b =>
                {
                    b.HasOne("Business.Enties.MedicModel.InstitutionModel.Corpus", "Corpus")
                        .WithMany("Corpus_Medics")
                        .HasForeignKey("CorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.MedicModel.Medic", "Medic")
                        .WithMany("Corpus_Medics")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corpus");

                    b.Navigation("Medic");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Department", b =>
                {
                    b.HasOne("Business.Enties.MedicModel.Medic", "ChiefsOfDepartment")
                        .WithMany("HeadOfDepartment")
                        .HasForeignKey("ChiefsOfDepartmentId");

                    b.HasOne("Business.Enties.MedicModel.InstitutionModel.Corpus", "Corpus")
                        .WithMany("Departments")
                        .HasForeignKey("CorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChiefsOfDepartment");

                    b.Navigation("Corpus");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Device", b =>
                {
                    b.HasOne("Business.Enties.MedicModel.InstitutionModel.Corpus", "Corpus")
                        .WithMany("Devices")
                        .HasForeignKey("CorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corpus");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.Medic", b =>
                {
                    b.HasOne("Business.Enties.Address.Street", "Address")
                        .WithMany("Medics")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.MedicModel.InstitutionModel.Department", "Doctors")
                        .WithMany("Medics")
                        .HasForeignKey("DoctorsId");

                    b.HasOne("Business.Enties.Gender", "Gender")
                        .WithMany("Medics")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.MedicModel.Role", "Role")
                        .WithMany("Medic")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.MedicModel.InstitutionModel.Department", "MedicRegistrator")
                        .WithMany("MedicRegistrators")
                        .HasForeignKey("MedicRegistratorId");

                    b.Navigation("Address");

                    b.Navigation("Doctors");

                    b.Navigation("Gender");

                    b.Navigation("MedicRegistrator");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.AdvancedTrainingCourses", b =>
                {
                    b.HasOne("Business.Enties.Address.Street", "Street")
                        .WithMany("AdvancedTrainingCourses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.HightSchool", b =>
                {
                    b.HasOne("Business.Enties.Address.Street", "Street")
                        .WithMany("HightSchools")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.Intership", b =>
                {
                    b.HasOne("Business.Enties.Address.Street", "Street")
                        .WithMany("Interships")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.PlaceOfStudy", b =>
                {
                    b.HasOne("Business.Enties.MedicModel.PlaceOfStudyModel.AdvancedTrainingCourses", "AdvancedTrainingCourses")
                        .WithMany("PlaceOfStudies")
                        .HasForeignKey("AdvancedTrainingCoursesId");

                    b.HasOne("Business.Enties.MedicModel.PlaceOfStudyModel.HightSchool", "HightSchools")
                        .WithMany("PlaceOfStudies")
                        .HasForeignKey("HightSchoolsId");

                    b.HasOne("Business.Enties.MedicModel.PlaceOfStudyModel.Intership", "Interships")
                        .WithMany("PlaceOfStudies")
                        .HasForeignKey("IntershipsId");

                    b.HasOne("Business.Enties.MedicModel.Medic", "Medic")
                        .WithMany("PlaceOfStudies")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.MedicModel.PlaceOfStudyModel.Speciality", "Specialities")
                        .WithMany("PlaceOfStudies")
                        .HasForeignKey("SpecialitiesId");

                    b.HasOne("Business.Enties.MedicModel.PlaceOfStudyModel.Specialization", "Specialization")
                        .WithMany("PlaceOfStudies")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvancedTrainingCourses");

                    b.Navigation("HightSchools");

                    b.Navigation("Interships");

                    b.Navigation("Medic");

                    b.Navigation("Specialities");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.Speciality", b =>
                {
                    b.HasOne("Business.Enties.Address.Street", "Street")
                        .WithMany("Specialities")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.Description", b =>
                {
                    b.HasOne("Business.Enties.MedicModel.InstitutionModel.Device", "Device")
                        .WithMany("Descriptions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.MedicModel.Medic", "Doctor")
                        .WithMany("Descriptions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.MedicModel.Medic", "HeadOfDepartment")
                        .WithMany("DesctioptionHeadOfDepartment")
                        .HasForeignKey("HeadOfDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.Method", "Method")
                        .WithMany("Descriptions")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.ProcessDynamics", "ProcessDynamics")
                        .WithMany("Descriptions")
                        .HasForeignKey("ProcessDynamicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.ResearchArea", "ResearchArea")
                        .WithMany("Descriptions")
                        .HasForeignKey("ResearchAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.IllnessModel.ResultIllness", "ResultIllness")
                        .WithMany("Descriptions")
                        .HasForeignKey("ResultIllnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.Description", "SubDescription")
                        .WithMany()
                        .HasForeignKey("SubDescriptionId");

                    b.Navigation("Device");

                    b.Navigation("Doctor");

                    b.Navigation("HeadOfDepartment");

                    b.Navigation("Method");

                    b.Navigation("ProcessDynamics");

                    b.Navigation("ResearchArea");

                    b.Navigation("ResultIllness");

                    b.Navigation("SubDescription");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.Description_StatusOfTheAttribute", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.Description", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.StatusOfTheAttribute", "StatusOfTheAttribute")
                        .WithMany()
                        .HasForeignKey("StatusOfTheAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("StatusOfTheAttribute");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.Method_DescriptionOfSigns", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.DescriptionOfSigns", "DescriptionOfSigns")
                        .WithMany()
                        .HasForeignKey("DescriptionOfSighsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.Method", "Method")
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionOfSigns");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.StatusOfTheAttribute", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.DescriptionOfSigns", "DescriptionOfSigns")
                        .WithMany("StatusOfTheAttributes")
                        .HasForeignKey("DescriptionOfSignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionOfSigns");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.Illness_Method", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.IllnessModel.Illness", "Illness")
                        .WithMany()
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.Method", "Method")
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Illness");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.ResultIllness", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.IllnessModel.SignsOfResearch", "SignsOfResearch")
                        .WithMany("ResultIllnesses")
                        .HasForeignKey("SignsOfResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignsOfResearch");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.SignsOfResearch", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.IllnessModel.Illness", "Illness")
                        .WithMany("SignsOfResearches")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Illness");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.Method", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.ResearchArea", "ResearchArea")
                        .WithMany("Methods")
                        .HasForeignKey("ResearchAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.ResearchCategory", "ResearchCategory")
                        .WithMany("Methods")
                        .HasForeignKey("ResearchCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchArea");

                    b.Navigation("ResearchCategory");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.RadiationDose", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.Method", "Method")
                        .WithMany("RadiationDose")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.ResearchArea", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.Patient", "Patient")
                        .WithMany("ResearchAreas")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.OutpatientCard", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.Patient", "Patient")
                        .WithMany("OutpatientCards")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.ResearchArea", "ResearchArea")
                        .WithMany()
                        .HasForeignKey("ResearchAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("ResearchArea");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.Patient", b =>
                {
                    b.HasOne("Business.Enties.Gender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("DescriptionOfSignsMethod", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.DescriptionOfSigns", null)
                        .WithMany()
                        .HasForeignKey("DescriptionOfSignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.Method", null)
                        .WithMany()
                        .HasForeignKey("MethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DescriptionStatusOfTheAttribute", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.Description", null)
                        .WithMany()
                        .HasForeignKey("DescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.StatusOfTheAttribute", null)
                        .WithMany()
                        .HasForeignKey("StatusOfTheAttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IllnessMethod", b =>
                {
                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.IllnessModel.Illness", null)
                        .WithMany()
                        .HasForeignKey("IllnessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Enties.PatientModel.DescriptionModel.Method", null)
                        .WithMany()
                        .HasForeignKey("MethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Business.Enties.Address.City", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Business.Enties.Address.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Business.Enties.Address.Region", b =>
                {
                    b.Navigation("Citys");
                });

            modelBuilder.Entity("Business.Enties.Address.Street", b =>
                {
                    b.Navigation("AdvancedTrainingCourses");

                    b.Navigation("Corpuses");

                    b.Navigation("HightSchools");

                    b.Navigation("Interships");

                    b.Navigation("Medics");

                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("Business.Enties.Gender", b =>
                {
                    b.Navigation("Medics");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Corpus", b =>
                {
                    b.Navigation("Corpus_Medics");

                    b.Navigation("Departments");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Department", b =>
                {
                    b.Navigation("MedicRegistrators");

                    b.Navigation("Medics");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Device", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.InstitutionModel.Institution", b =>
                {
                    b.Navigation("Corpuses");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.Medic", b =>
                {
                    b.Navigation("Corpus_Medics");

                    b.Navigation("Descriptions");

                    b.Navigation("DesctioptionHeadOfDepartment");

                    b.Navigation("Files");

                    b.Navigation("HeadOfDepartment");

                    b.Navigation("HistoryNodes");

                    b.Navigation("PlaceOfStudies");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.AdvancedTrainingCourses", b =>
                {
                    b.Navigation("PlaceOfStudies");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.HightSchool", b =>
                {
                    b.Navigation("PlaceOfStudies");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.Intership", b =>
                {
                    b.Navigation("PlaceOfStudies");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.Speciality", b =>
                {
                    b.Navigation("PlaceOfStudies");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.PlaceOfStudyModel.Specialization", b =>
                {
                    b.Navigation("PlaceOfStudies");
                });

            modelBuilder.Entity("Business.Enties.MedicModel.Role", b =>
                {
                    b.Navigation("Medic");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.DescriptionOfSignsModel.DescriptionOfSigns", b =>
                {
                    b.Navigation("StatusOfTheAttributes");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.Illness", b =>
                {
                    b.Navigation("SignsOfResearches");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.ResultIllness", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.IllnessModel.SignsOfResearch", b =>
                {
                    b.Navigation("ResultIllnesses");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.Method", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("RadiationDose");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.ProcessDynamics", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.ResearchArea", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Methods");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.DescriptionModel.ResearchCategory", b =>
                {
                    b.Navigation("Methods");
                });

            modelBuilder.Entity("Business.Enties.PatientModel.Patient", b =>
                {
                    b.Navigation("HistoryNodes");

                    b.Navigation("OutpatientCards");

                    b.Navigation("ResearchAreas");
                });

            modelBuilder.Entity("Business.Enties.SysAdmin", b =>
                {
                    b.Navigation("HistoryNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
